####################
WHICH LICENSE HERE???
####################

This project is intended to allow many different types of devices to be controlled by a web interface, IR, X10, etc.

The original project is located at https://github.com/azylman/webmote 


**********************
Goals:
**********************

Extensible - plugins for new protocols and functionality

Mobile web interface - works on any browser on any platform

Simple enough for my parents (old) to setup

*Serve media connected to the server, upload to, download to, etc (this is more of a long term goal...)

**********************
Architechture:
**********************

A web server in one's house communicates with the various connected devices as well as serving the webmote interface.  The high level architechture is that of a core and plugins that expand webmote's functionality, add protocols, etc..

**********************
Core Description:
**********************

A set of superclasses (and associated methods) for the plugins to expand on.

**********************
Plugin Description:
**********************

A set of subclasses, files and routines that expand the functionality of webmote.
The format is as follows:

A top level directory containing at least:
    templates (directory)
        html files containing pages specific to the plugin
    static    (directory)
        images, javascript, etc.
    models.py
    urls.py
    views.py
    __init__.py
    [description.txt/xml/json]  -not sure about this, but some formated file describing the module for use in menus and global operations

**********************
Tasks:
**********************

Formalize the core
Prioritize Plugins
Decide on more tasks lol

**********************
Setup:
**********************

#install virtualenv, pip
sudo apt-get install python-virtualenv, python-pip
cd webmote
./install

**********************
Run (development server):
**********************

./run



%%%%%%%%%%%%
Thoughts on how to implement:
%%%%%%%%%%%%

When each of the relavent files are loaded (models, urls, views) on server startup we should look through the modules directory for modules (subdirectories). 

The settings file will need to add the static directory in each module to its set of paths.

The templates I am not sure about yet.  An ok solution might be to create symlinks for each modules template files (or just the folder) in the main template folder.  If we could handle this the same way as the static files that would be best but I don't know if django has a list of directories to look for templates in or not...looking into it. 
